// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PSW_ClinicSystem.Data;

namespace PSW_ClinicSystem.Migrations
{
    [DbContext(typeof(DataDbContext))]
    [Migration("20210903095354_Initial3")]
    partial class Initial3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("PSW_ClinicSystem.Data.Admin", b =>
                {
                    b.Property<int>("adminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("hospitalId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("role")
                        .HasColumnType("text");

                    b.HasKey("adminId");

                    b.HasIndex("hospitalId");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Appointment", b =>
                {
                    b.Property<int>("appointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("appointmentTime")
                        .HasColumnType("datetime");

                    b.Property<int>("doctorId")
                        .HasColumnType("int");

                    b.Property<bool>("isConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isRejected")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isTaken")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("patientId")
                        .HasColumnType("int");

                    b.Property<bool>("priority")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("appointmentId");

                    b.HasIndex("doctorId");

                    b.HasIndex("patientId");

                    b.ToTable("Appointment");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Doctor", b =>
                {
                    b.Property<int>("doctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("hospitalId")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("role")
                        .HasColumnType("text");

                    b.Property<int>("specialistFieldId")
                        .HasColumnType("int");

                    b.HasKey("doctorId");

                    b.HasIndex("hospitalId");

                    b.HasIndex("specialistFieldId");

                    b.ToTable("Doctor");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Feedback", b =>
                {
                    b.Property<int>("feedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("content")
                        .HasColumnType("text");

                    b.Property<bool>("isApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("patientId")
                        .HasColumnType("int");

                    b.HasKey("feedbackId");

                    b.HasIndex("patientId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Hospital", b =>
                {
                    b.Property<int>("hospitalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("hospitalId");

                    b.ToTable("Hospital");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Medicine", b =>
                {
                    b.Property<int>("medicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("medicineName")
                        .HasColumnType("text");

                    b.HasKey("medicineId");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Patient", b =>
                {
                    b.Property<int>("patientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("doctorId")
                        .HasColumnType("int");

                    b.Property<bool>("isBlocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("role")
                        .HasColumnType("text");

                    b.HasKey("patientId");

                    b.HasIndex("doctorId");

                    b.ToTable("Patient");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Pharmacist", b =>
                {
                    b.Property<int>("pharmacistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int>("pharmacyId")
                        .HasColumnType("int");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.HasKey("pharmacistId");

                    b.HasIndex("pharmacyId");

                    b.ToTable("Pharmacist");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Pharmacy", b =>
                {
                    b.Property<int>("pharmacyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("pharmacyId");

                    b.ToTable("Pharmacy");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Prescription", b =>
                {
                    b.Property<int>("prescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("doctorId")
                        .HasColumnType("int");

                    b.Property<bool>("isUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("medicineId")
                        .HasColumnType("int");

                    b.Property<int>("patientId")
                        .HasColumnType("int");

                    b.HasKey("prescriptionId");

                    b.HasIndex("doctorId");

                    b.HasIndex("medicineId");

                    b.HasIndex("patientId");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Referral", b =>
                {
                    b.Property<int>("referralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("doctorId")
                        .HasColumnType("int");

                    b.Property<bool>("isUsed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("patientId")
                        .HasColumnType("int");

                    b.Property<int>("specialistId")
                        .HasColumnType("int");

                    b.HasKey("referralId");

                    b.HasIndex("doctorId");

                    b.HasIndex("patientId");

                    b.HasIndex("specialistId");

                    b.ToTable("Referral");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.SpecialistField", b =>
                {
                    b.Property<int>("specialistFieldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("fieldName")
                        .HasColumnType("text");

                    b.HasKey("specialistFieldId");

                    b.ToTable("SpecialistField");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Admin", b =>
                {
                    b.HasOne("PSW_ClinicSystem.Data.Hospital", "hospital")
                        .WithMany("Admin")
                        .HasForeignKey("hospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("hospital");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Appointment", b =>
                {
                    b.HasOne("PSW_ClinicSystem.Data.Doctor", "doctor")
                        .WithMany()
                        .HasForeignKey("doctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSW_ClinicSystem.Data.Patient", "patient")
                        .WithMany()
                        .HasForeignKey("patientId");

                    b.Navigation("doctor");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Doctor", b =>
                {
                    b.HasOne("PSW_ClinicSystem.Data.Hospital", "hospital")
                        .WithMany("Doctor")
                        .HasForeignKey("hospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSW_ClinicSystem.Data.SpecialistField", "specialistField")
                        .WithMany("Doctor")
                        .HasForeignKey("specialistFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("hospital");

                    b.Navigation("specialistField");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Feedback", b =>
                {
                    b.HasOne("PSW_ClinicSystem.Data.Patient", "patient")
                        .WithMany("feedback")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("patient");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Patient", b =>
                {
                    b.HasOne("PSW_ClinicSystem.Data.Doctor", "doctor")
                        .WithMany()
                        .HasForeignKey("doctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Pharmacist", b =>
                {
                    b.HasOne("PSW_ClinicSystem.Data.Pharmacy", "pharmacy")
                        .WithMany("pharmacist")
                        .HasForeignKey("pharmacyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("pharmacy");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Prescription", b =>
                {
                    b.HasOne("PSW_ClinicSystem.Data.Doctor", "doctor")
                        .WithMany("prescription")
                        .HasForeignKey("doctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSW_ClinicSystem.Data.Medicine", "medicine")
                        .WithMany()
                        .HasForeignKey("medicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSW_ClinicSystem.Data.Patient", "patient")
                        .WithMany("prescription")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");

                    b.Navigation("medicine");

                    b.Navigation("patient");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Referral", b =>
                {
                    b.HasOne("PSW_ClinicSystem.Data.Doctor", "doctor")
                        .WithMany()
                        .HasForeignKey("doctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSW_ClinicSystem.Data.Patient", "patient")
                        .WithMany("referral")
                        .HasForeignKey("patientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PSW_ClinicSystem.Data.Doctor", "specialist")
                        .WithMany()
                        .HasForeignKey("specialistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");

                    b.Navigation("patient");

                    b.Navigation("specialist");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Doctor", b =>
                {
                    b.Navigation("prescription");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Hospital", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Patient", b =>
                {
                    b.Navigation("feedback");

                    b.Navigation("prescription");

                    b.Navigation("referral");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.Pharmacy", b =>
                {
                    b.Navigation("pharmacist");
                });

            modelBuilder.Entity("PSW_ClinicSystem.Data.SpecialistField", b =>
                {
                    b.Navigation("Doctor");
                });
#pragma warning restore 612, 618
        }
    }
}
